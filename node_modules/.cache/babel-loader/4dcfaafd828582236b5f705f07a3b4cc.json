{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ac31834\\\\Desktop\\\\PersonalGoals\\\\PWA\\\\WeatherApp\\\\weather-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport FetchWeather, { fetchWeather } from \"./api/fetchData\";\nimport sunrise from \"./Assets/sunrise.png\";\nimport sunset from \"./Assets/sunset.png\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [place, setPlace] = useState({});\n\n  const search = async e => {\n    if (e.key === \"Enter\") {\n      const data = await fetchWeather(query);\n      setWeather(data);\n      setQuery(\"\");\n    }\n  };\n\n  const handlePlace = async value => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: place,\n    onChange: setPlace,\n    onSelect: handlePlace,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    type: \"text\",\n    className: \"search\"\n  }, getInputProps({\n    placeholder: \"Search....\"\n  }), {\n    id: \"searchTerm\",\n    value: query,\n    onChange: e => setQuery(e.target.value),\n    onKeyPress: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 28\n    }\n  }, \"...loading\") : null, suggestions.map(suggestion => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 26\n      }\n    }, suggestion.description);\n  })))), weather.main && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"city-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, weather.name, \" \"), /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, weather.sys.country, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"city-temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, Math.round(weather.main.temp - 273.15)), /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"\\xB0C\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"city-icon\",\n    src: `https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`,\n    alt: weather.weather[0].description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, weather.weather[0].description)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"inline-block\",\n      float: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"city-icon-time\",\n    src: sunrise,\n    alt: weather.weather[0].description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"p-fontStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, new Date(weather.sys.sunrise * 1000).toLocaleTimeString(\"en-US\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"inline-block\",\n      float: \"left\",\n      marginLeft: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"city-icon-time\",\n    src: sunset,\n    alt: weather.weather[0].description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"p-fontStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, new Date(weather.sys.sunset * 1000).toLocaleTimeString(\"en-US\")))))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/ac31834/Desktop/PersonalGoals/PWA/WeatherApp/weather-app/src/App.js"],"names":["React","useState","FetchWeather","fetchWeather","sunrise","sunset","PlacesAutocomplete","geocodeByAddress","getLatLng","App","query","setQuery","weather","setWeather","place","setPlace","search","e","key","data","handlePlace","value","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","target","map","suggestion","description","main","name","sys","country","Math","round","temp","icon","display","float","Date","toLocaleTimeString","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport FetchWeather, { fetchWeather } from \"./api/fetchData\";\r\nimport sunrise from \"./Assets/sunrise.png\";\r\nimport sunset from \"./Assets/sunset.png\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport \"./App.css\";\r\nconst App = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n  const [place, setPlace] = useState({});\r\n  const search = async (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const data = await fetchWeather(query);\r\n      setWeather(data);\r\n      setQuery(\"\");\r\n    }\r\n  };\r\n\r\n  const handlePlace = async (value) => {};\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"main-container\">\r\n        <PlacesAutocomplete\r\n          value={place}\r\n          onChange={setPlace}\r\n          onSelect={handlePlace}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            suggestions,\r\n            getSuggestionItemProps,\r\n            loading,\r\n          }) => (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"search\"\r\n                {...getInputProps({ placeholder: \"Search....\" })}\r\n                id=\"searchTerm\"\r\n                value={query}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                onKeyPress={search}\r\n              />\r\n              <div>\r\n                {loading ? <div>...loading</div> : null}\r\n                {suggestions.map((suggestion) => {\r\n                  return <div>{suggestion.description}</div>;\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </PlacesAutocomplete>\r\n        {/* <input\r\n          type=\"text\"\r\n          className=\"search\"\r\n          placeholder=\"Search....\"\r\n          id=\"searchTerm\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyPress={search}\r\n        /> */}\r\n\r\n        {weather.main && (\r\n          <div className=\"city\">\r\n            <h2 className=\"city-name\">\r\n              <span>{weather.name} </span>\r\n              <sup>{weather.sys.country} </sup>\r\n            </h2>\r\n            <div className=\"city-temp\">\r\n              <span>{Math.round(weather.main.temp - 273.15)}</span>\r\n              <sup>&deg;C</sup>\r\n            </div>\r\n            <div className=\"info\">\r\n              <img\r\n                className=\"city-icon\"\r\n                src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\r\n                alt={weather.weather[0].description}\r\n              />\r\n              <p>{weather.weather[0].description}</p>\r\n            </div>\r\n            <div>\r\n              <div style={{ display: \"inline-block\", float: \"left\" }}>\r\n                <img\r\n                  className=\"city-icon-time\"\r\n                  src={sunrise}\r\n                  alt={weather.weather[0].description}\r\n                />\r\n\r\n                <p className=\"p-fontStyle\">\r\n                  {new Date(weather.sys.sunrise * 1000).toLocaleTimeString(\r\n                    \"en-US\"\r\n                  )}\r\n                </p>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  float: \"left\",\r\n                  marginLeft: \"15px\",\r\n                }}\r\n              >\r\n                <img\r\n                  className=\"city-icon-time\"\r\n                  src={sunset}\r\n                  alt={weather.weather[0].description}\r\n                />\r\n\r\n                <p className=\"p-fontStyle\">\r\n                  {new Date(weather.sys.sunset * 1000).toLocaleTimeString(\r\n                    \"en-US\"\r\n                  )}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}